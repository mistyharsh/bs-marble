// Generated by BUCKLESCRIPT VERSION 4.0.18, PLEASE EDIT WITH CARE

import * as Curry from "bs-platform/lib/es6/curry.js";
import * as Caml_option from "bs-platform/lib/es6/caml_option.js";
import * as Operator from "rxjs/operator";
import * as Operators from "rxjs/operators";

function catchError(selector, stream) {
  return Curry._1(Operators.catchError(Curry.__2(selector)), stream);
}

function debounceTime(timerInMs, scheduler, param, stream) {
  return Curry._1(Operators.debounceTime(timerInMs, scheduler !== undefined ? Caml_option.valFromOption(scheduler) : undefined), stream);
}

function distinctUntilChanged(compare, param, stream) {
  return Curry._1(Operators.distinctUntilChanged(Caml_option.option_get(Curry.__2(compare))), stream);
}

function elementAt(index, $$default, param, stream) {
  return Curry._1(Operators.elementAt(index, $$default !== undefined ? Caml_option.valFromOption($$default) : undefined), stream);
}

function filter(predicate, stream) {
  return Curry._1(Operators.filter(Curry.__1(predicate)), stream);
}

function filteri(predicate, stream) {
  return Curry._1(Operators.filter(Curry.__2(predicate)), stream);
}

function map(project, stream) {
  return Curry._1(Operators.map(Curry.__1(project)), stream);
}

function mapi(project, stream) {
  return Curry._1(Operators.map(Curry.__2(project)), stream);
}

function mergeMap(project, stream) {
  return Curry._1(Operators.mergeMap(Curry.__1(project)), stream);
}

function mergeMapArray(project, stream) {
  return Curry._1(Operators.mergeMap(Curry.__1(project)), stream);
}

function mergeMapPromise(project, stream) {
  return Curry._1(Operators.mergeMap(Curry.__1(project)), stream);
}

function reduce(accumulator, seed, stream) {
  return Curry._1(Operators.reduce(Curry.__3(accumulator), seed), stream);
}

function scan(accumulator, seed, stream) {
  return Curry._1(Operators.scan(Curry.__3(accumulator), seed), stream);
}

function switchMap(project, stream) {
  return Curry._1(Operators.switchMap(Curry.__1(project)), stream);
}

function switchToArray(project, stream) {
  return Curry._1(Operators.switchMap(Curry.__1(project)), stream);
}

function switchToPromise(project, stream) {
  return Curry._1(Operators.switchMap(Curry.__1(project)), stream);
}

function take(count, stream) {
  return Curry._1(Operators.take(count), stream);
}

function withLatestFrom2(stream, sourceStream) {
  return Curry._1(Operator.withLatestFrom(stream), sourceStream);
}

function withLatestFrom3(stream1, stream2, sourceStream) {
  return Curry._1(Operator.withLatestFrom(stream1, stream2), sourceStream);
}

function withLatestFrom4(stream1, stream2, stream3, sourceStream) {
  return Curry._1(Operator.withLatestFrom(stream1, stream2, stream3), sourceStream);
}

function withLatestFrom5(stream1, stream2, stream3, stream4, sourceStream) {
  return Curry._1(Operator.withLatestFrom(stream1, stream2, stream3, stream4), sourceStream);
}

export {
  catchError ,
  debounceTime ,
  distinctUntilChanged ,
  elementAt ,
  filter ,
  filteri ,
  map ,
  mapi ,
  mergeMap ,
  mergeMapArray ,
  mergeMapPromise ,
  reduce ,
  scan ,
  switchMap ,
  switchToArray ,
  switchToPromise ,
  take ,
  withLatestFrom2 ,
  withLatestFrom3 ,
  withLatestFrom4 ,
  withLatestFrom5 ,
  
}
/* rxjs/operator Not a pure module */
